--[[
Credits List
ethereum: creating the base sniper
chocolog: providing type.huge
Edmond: offered tips for optimization

Hello from root, I won't be updating this as I have been very demotivated to update this script
it's required to fork this for now. cya
]]--

local osclock = os.clock()

-- A탳teapt캒 p칙n캒 c칙nd jocul este complet 칥nc캒rcat
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- A탳teapt캒 3 secunde dup캒 칥nc캒rcarea complet캒 a jocului
task.wait(3)

-- Dezactiveaz캒 urm캒rirea inactivit캒탵ii juc캒torului
game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Enabled = false

-- Dezactiveaz캒 randarea 3D
game:GetService("RunService"):Set3dRenderingEnabled(false)

-- Ob탵ine referin탵a c캒tre obiectul Broadcast din ReplicatedStorage
local Booths_Broadcast = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")

-- Ob탵ine serviciul juc캒torilor 탳i lista de juc캒tori actuali
local Players = game:GetService('Players')
local getPlayers = Players:GetPlayers()
local PlayerInServer = #getPlayers

-- Ob탵ine serviciul HttpService, TeleportService 탳i ReplicatedStorage
local http = game:GetService("HttpService")
local ts = game:GetService("TeleportService")
local rs = game:GetService("ReplicatedStorage")
local Library = require(rs:WaitForChild("Library"))

-- Ini탵ializeaz캒 variabilele pentru snipeNormal 탳i semnal
local snipeNormal = false
local signal

-- Conecteaz캒 un eveniment pentru a detecta inactivitatea juc캒torului 탳i a trimite comenzi de mi탳care
local vu = game:GetService("VirtualUser")
Players.LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   task.wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

-- Func탵ie pentru procesarea informa탵iilor list캒rii
local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtStatus, class, failMessage, snipeNormal)
    local gemamount = Players.LocalPlayer.leaderstats["游눑 Diamonds"].Value
    local snipeMessage = "||" .. Players.LocalPlayer.Name .. "||"
    local versionVal = { [1] = "Golden ", [2] = "Rainbow " }
    local versionStr = versionVal[version] or (version == nil and "")
    local mention = (class == "Pet" and (Library.Directory.Pets[item].huge or Library.Directory.Pets[item].titanic)) and "<@" .. userid .. ">" or ""
    
    local webcolor = boughtStatus and tonumber(0x00ff00) or tonumber(0xff0000)
    local webStatus = boughtStatus and "Success!" or failMessage

    snipeMessage = snipeMessage .. (boughtStatus and " just sniped " or " failed to snipe ") .. amount .. "x **" .. versionStr

    if shiny then
        snipeMessage = snipeMessage .. " Shiny "
    end
    
    snipeMessage = snipeMessage .. item .. "**"

    local message1 = {
        ['content'] = mention,
        ['embeds'] = {
            {
                ["author"] = {
                    ["name"] = "Boor Sniper 游꺀",
                    ["icon_url"] = "https://cdn.discordapp.com/attachments/1149218291957637132/1190527382583525416/new-moon-face_1f31a.png?ex=65a22006&is=658fab06&hm=55f8900eef039709c8e57c96702f8fb7df520333ec6510a81c31fc746193fbf2&",
                },
                ['title'] = snipeMessage,
                ["color"] = webcolor,
                ["timestamp"] = DateTime.now():ToIsoDate(),
                ['fields'] = {
                    {
                        ['name'] = "__Price:__",
                        ['value'] = gems .. " 游눑",
                    },
                    {
                        ['name'] = "__Bought from:__",
                        ['value'] = "||" .. tostring(boughtFrom) .. "||",
                    },
                    {
                        ['name'] = "__Amount:__",
                        ['value'] = amount .. "x",
                    },
                    {
                        ['name'] = "__Remaining gems:__",
                        ['value'] = gemamount .. " 游눑",
                    },      
                    {
                        ['name'] = "__PetID:__",
                        ['value'] = "||" .. tostring(uid) .. "||",
                    },
                    {
                        ['name'] = "__Status:__",
                        ['value'] = webStatus,
                    },
                    {
                        ['name'] = "__Ping:__",
                        ['value'] = math.round(Players.LocalPlayer:GetNetworkPing() * 2000) .. "ms",
                    }
                },
                ["footer"] = {
                    ["icon_url"] = "https://cdn.discordapp.com/attachments/1149218291957637132/1190527382583525416/new-moon-face_1f31a.png?ex=65a22006&is=658fab06&hm=55f8900eef039709c8e57c96702f8fb7df520333ec6510a81c31fc746193fbf2&",
                    ["text"] = "Heavily Modified by Root"
                }
            }
        }
    }

    local jsonMessage = http:JSONEncode(message1)
    local success, _ = pcall(function()
        http:PostAsync(boughtStatus and webhook or webhookFail, jsonMessage)
    end)
end

-- Func탵ie pentru a 칥ncerca achizi탵ia unui element
local function tryPurchase(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp, snipeNormal)
    signal = game:GetService("RunService").Heartbeat:Connect(function()
        if buytimestamp < workspace:GetServerTimeNow() then
            signal:Disconnect()
            signal = nil
        end
    end)
    repeat task.wait() until signal == nil

    local boughtPet = false
    local boughtMessage = ""
    processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, class, boughtMessage, snipeNormal)
end

-- Conecteaz캒 evenimentul Broadcast pentru a trata list캒rile
Booths_Broadcast.OnClientEvent:Connect(function(username, message)
    if type(message) == "table" then
        local highestTimestamp = -math.huge
        local key = nil
        local listing = nil

        for v, value in pairs(message["Listings"] or {}) do
            if type(value) == "table" and value["ItemData"] and value["ItemData"]["data"] then
                local timestamp = value["Timestamp"]
                if timestamp > highestTimestamp then
                    highestTimestamp = timestamp
                    key = v
                    listing = value
                end
            end
        end

        if listing then
            local buytimestamp = listing["ReadyTimestamp"]
            local listTimestamp = listing["Timestamp"]
            local data = listing["ItemData"]["data"]
            local gems = tonumber(listing["DiamondCost"])
            local uid = key
            local item = data["id"]
            local version = data["pt"]
            local shiny = data["sh"]
            local amount = tonumber(data["_am"]) or 1
            local playerid = message['PlayerID']
            local class = tostring(listing["ItemData"]["class"])
            local unitGems = gems / amount
            snipeNormal = false
                
            if item == "Diamond Fishing Rod" and unitGems <= 41000000 then
                coroutine.wrap(tryPurchase)(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp, snipeNormal)
                return
            end
        end
    end
end)

-- Func탵ie pentru a s캒ri la un alt server
local function jumpToServer() 
    local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true" 
    local req = request({ Url = string.format(sfUrl, 15502339080, "Desc", 50) }) 
    local body = http:JSONDecode(req.Body) 
    local deep = math.random(1, 3)
    
    if deep > 1 then 
        for i = 1, deep, 1 do 
             req = request({ Url = string.format(sfUrl .. "&cursor=" .. body.nextPageCursor, 15502339080, "Desc", 50) }) 
             body = http:JSONDecode(req.Body) 
             task.wait(0.1)
        end 
    end 
    
    local servers = {} 
    
    if body and body.data then 
        for i, v in next, body.data do 
            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                table.insert(servers, v.id)
            end
        end
    end
    
    local randomCount = #servers
    
    if not randomCount then
       randomCount = 2
    end
    
    ts:TeleportToPlaceInstance(15502339080, servers[math.random(1, randomCount)], game:GetService("Players").LocalPlayer) 
end

-- Verific캒 dac캒 num캒rul de juc캒tori este mai mic dec칙t 30 탳i s캒ri la un alt server 칥n caz afirmativ
if PlayerInServer < 30 then
    while task.wait(10) do
        jumpToServer()
    end
end

-- Verific캒 dac캒 num캒rul de juc캒tori este mai mic dec칙t 20 탳i s캒ri la un alt server 칥n caz afirmativ
Players.PlayerRemoving:Connect(function(player)
    getPlayers = Players:GetPlayers()
    PlayerInServer = #getPlayers
    if PlayerInServer < 20 then
        while task.wait(10) do
            jumpToServer()
        end
    end
end) 

-- A탳teapt캒 칥ntre 720 탳i 1000 de secunde 탳i s캒ri la un alt server
local hopDelay = math.random(720, 1000)

while task.wait(1) do
    if math.floor(os.clock() - osclock) >= hopDelay then
        while task.wait(10) do
            jumpToServer()        
        end 
    end
end
