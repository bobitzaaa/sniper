local function tryPurchase(uid, gems, item, version, shiny, amount, username, class, playerid, buytimestamp, listTimestamp, snipeNormal)
    -- Așteaptă până când articolul este disponibil pentru cumpărare
    while workspace:GetServerTimeNow() < buytimestamp do
        task.wait()
    end
    -- Verifică dacă toate valorile sunt valide
    if typeof(uid) == "string" and
       typeof(gems) == "number" and
       typeof(item) == "string" and
       typeof(playerid) == "number" and
       typeof(buytimestamp) == "number" and
       (typeof(version) == "number" or version == nil) and -- Presupunând că 'version' poate fi nil
       (typeof(shiny) == "boolean" or shiny == nil) and -- Presupunând că 'shiny' poate fi nil
       typeof(amount) == "number" and
       typeof(username) == "string" and
       typeof(class) == "string" and
       typeof(listTimestamp) == "number" and
       typeof(snipeNormal) == "boolean" then

        local success, boughtPet, boughtMessage = pcall(function()
            -- Încercăm să cumpărăm articolul folosind metoda de pe server
            return rs.Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
        end)

        if success and boughtPet then
            -- Articolul a fost cumpărat cu succes
        else
            -- Tratează cazul de eroare
            warn("Eroare la cumpărarea articolului: " .. tostring(boughtMessage))
        end
    else
        warn("Date invalide pentru cumpărare.")
    end
end
