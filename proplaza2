local Players = game:GetService('Players')
local http = game:GetService("HttpService")
local rs = game:GetService("ReplicatedStorage")
local ts = game:GetService("TeleportService")

local Booths_Broadcast = rs.Network:WaitForChild("Booths_Broadcast")
local Library = require(rs:WaitForChild("Library"))

local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtStatus, class, failMessage)
    local gemAmount = Players.LocalPlayer.leaderstats["ðŸ’Ž Diamonds"].Value
    local playerName = Players.LocalPlayer.Name
    
    local versionStr = (version == 1 and "Golden ") or (version == 2 and "Rainbow ") or ""
    local shinyStr = shiny and "Shiny " or ""
    local snipeMessage = playerName .. " just sniped " .. amount .. "x " .. versionStr .. shinyStr .. item
    
    local message = {
        content = boughtStatus and "Success!" or failMessage,
        embeds = {{
            author = {
                name = "Boor Sniper ðŸŒš",
                icon_url = "https://cdn.discordapp.com/attachments/1149218291957637132/1190527382583525416/new-moon-face_1f31a.png?ex=65a22006&is=658fab06&hm=55f8900eef039709c8e57c96702f8fb7df520333ec6510a81c31fc746193fbf2&"
            },
            title = snipeMessage,
            color = boughtStatus and tonumber(0x00ff00) or tonumber(0xff0000),
            timestamp = os.date("!%Y-%m-%dT%H:%M:%S"),
            fields = {
                { name = "Price:", value = gems .. " ðŸ’Ž" },
                { name = "Bought from:", value = "||" .. boughtFrom .. "||" },
                { name = "Amount:", value = amount .. "x" },
                { name = "Remaining gems:", value = gemAmount .. " ðŸ’Ž" }
            },
            footer = {
                icon_url = "https://cdn.discordapp.com/attachments/1149218291957637132/1190527382583525416/new-moon-face_1f31a.png?ex=65a22006&is=658fab06&hm=55f8900eef039709c8e57c96702f8fb7df520333ec6510a81c31fc746193fbf2&",
                text = "Heavily Modified by Root"
            }
        }}
    }

    local webhookURL = "YOUR_DISCORD_WEBHOOK_URL_HERE"
    local jsonMessage = http:JSONEncode(message)
    
    -- Trimite mesajul cÄƒtre serverul de Discord
    -- http:PostAsync(webhookURL, jsonMessage)
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
    if type(message) == "table" and message.Listings then
        local highestTimestamp = -math.huge
        local listing = nil

        for _, value in pairs(message.Listings) do
            if type(value) == "table" and value.ItemData and value.ItemData.data then
                local timestamp = value.Timestamp
                if timestamp > highestTimestamp then
                    highestTimestamp = timestamp
                    listing = value
                end
            end
        end

        if listing then
            local buyTimestamp = listing.ReadyTimestamp
            local data = listing.ItemData.data
            local gems = tonumber(listing.DiamondCost)
            local uid = listing.Id
            local item = data.id
            local version = data.pt
            local shiny = data.sh
            local amount = tonumber(data._am) or 1
            local boughtFrom = listing.PlayerName
            local class = listing.ItemData.class
            local unitGems = gems / amount
            
            if class == "Tools" and item == "Fishing Rod" and unitGems <= 41000000 then
                processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, true, class, "Success!")
                return
            end
        end
    end
end)

local function jumpToServer() 
    local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true" 
    local req = http:GetAsync(string.format(sfUrl, 15502339080, "Desc", 50))
    local body = http:JSONDecode(req)
    
    local servers = {}
    if body and body.data then 
        for _, v in ipairs(body.data) do 
            if type(v) == "table" and v.playing and v.maxPlayers and v.playing < v.maxPlayers and v.id ~= game.JobId then
                table.insert(servers, v.id)
            end
        end
    end
    
    if #servers > 0 then
        ts:TeleportToPlaceInstance(15502339080, servers[math.random(1, #servers)], Players.LocalPlayer)
    end
end

-- VerificÄƒ È™i comutÄƒ la un alt server Ã®n cazul Ã®n care numÄƒrul de jucÄƒtori este prea mic
local function checkAndSwitchServer()
    local playerCountThreshold = 30
    local playerCount = #Players:GetPlayers()
    
    if playerCount < playerCountThreshold then
        while true do
            jumpToServer()
            wait(10)
        end
    end
end

-- IniÈ›iazÄƒ verificarea serverului la Ã®nceput È™i monitorizeazÄƒ schimbÄƒrile Ã®n jucÄƒtori
checkAndSwitchServer()
Players.PlayerAdded:Connect(checkAndSwitchServer)
Players.PlayerRemoving:Connect(checkAndSwitchServer)

-- IniÈ›iazÄƒ un timer pentru a schimba serverul la intervale regulate
local hopDelay = math.random(720, 1000)
while true do
    wait(hopDelay)
    jumpToServer()
end
