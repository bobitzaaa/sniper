local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

 local Window = Rayfield:CreateWindow({
   Name = "üî• Bobo Hub |Pixel Incremental 2 üî´",
   LoadingTitle = "Pixel Incremental 2 üí•",
   LoadingSubtitle = "by Bobo Regele",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = ConfigBoboHub,
      FileName = "Bobo Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "https://discord.gg/P4cmPvsh",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Bobo Hub",
      Subtitle = "Key System",
      Note = "Key In Discord Server",
      FileName = "Bobo Regele",
      SaveKey = false,
      GrabKeyFromSite = true,
      Key = {"Key"}
   }
 })


 local MainTab = Window:CreateTab("üè†Auto Upgrades!", nil)
 local MainSection = MainTab:CreateSection("Pixel Upgrades")

 
-- UPGRADES:

-- PIXEL UPGRADES, PRIMUL UPGRADE
local function sendUpgradeRequest1()
    local args = {
        [1] = "1_1",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
 end
 
 local PixelBoostTimer = nil
 local checking = false
 
 local function StartPixelBoost()
    PixelBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
        if not checking then
            checking = true
            sendUpgradeRequest1()
            wait(1.5)
            checking = false
        end
    end)
 end
 
 local function StopPixelBoost()
    if PixelBoostTimer then
        PixelBoostTimer:Disconnect()
        PixelBoostTimer = nil
    end
 end
 
 local Toggle1 = MainTab:CreateToggle({
    Name = "Pixel Boost",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
         if Value then
             print("Pixel Boost enabled!")
             StartPixelBoost()
         else
             print("Pixel Boost disabled!")
             StopPixelBoost()
         end
    end,
 })
 


 
-- PIXEL UPGRA  DE, AL 2 LEA UPGRADE 
local function sendUpgradeRequest2()
    local args = {
        [1] = "1_2",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
 end

 local LuckBoostTimer = nil
 local checking = false

 local function StartLuckBoost()
    LuckBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
        if not checking then   
            checking = true
            sendUpgradeRequest2()
            wait(1.5)
            checking = false
        end
    end)
 end

 local function StopLuckBoost()
    if LuckBoostTimer then
        LuckBoostTimer:Disconnect()
        LuckBoostTimer = nil
    end
 end


 local Toggle2 = MainTab:CreateToggle({
    Name = "Luck Boost",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
         if Value then
             print("Luck Boost enabled!")
             StartLuckBoost()
         else
             print("Luck Boost disabled!")
             StopLuckBoost()
         end
    end,
 })



-- PIXEL UPGRADE, AL 3 LEA UPGRADE
local function sendUpgradeRequest3()
    local args = {
        [1] = "1_3",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
 end

 local CapacityBoostTimer = nil
 local checking = false

 local function StartCapacityBoost()
     CapacityBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
        if not checking then
                checking = true
                sendUpgradeRequest3()
                wait(1.5)
                checking = false
        end
    end)
 end

 local function StopCapacityBoost()
    if CapacityBoostTimer then
        CapacityBoostTimer:Disconnect()
        CapacityBoostTimer = nil
    end
 end


 local Toggle3 = MainTab:CreateToggle({
    Name = "Capacity Boost",
    CurrentValue = false,
    Flag = "Toggle3",
    Callback = function(Value)
         if Value then
             print("Capacity Boost enabled!")
             StartCapacityBoost()
         else
             print("Capacity Boost disabled!")
             StopCapacityBoost()
         end
    end,
 })












local MainSection = MainTab:CreateSection("Prestige Upgrades")

local function sendUpgradeRequest4()
    local args = {
        [1] = "4_1",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local PixelGainBoostTimer = nil
local checking = false

local function StartPixelGainBoost()
    PixelGainBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checking then
            checking = true    
            sendUpgradeRequest4()
            wait(1.5)
            checking = false
       end     
   end)
end

local function StopPixelGainBoost()
    if PixelGainBoostTimer then
        PixelGainBoostTimer:Disconnect()
        PixelGainBoostTimer = nil
    end
end

local Toggle1 = MainTab:CreateToggle({
    Name = "Prestige Pixel Boost",
    CurrentValue = false,
    Flag = "Toggle4",
    Callback = function(Value)
         if Value then
             print("Prestige Pixel Boost enabled!")
             StartPixelGainBoost()
         else
             print("Prestige Pixel disabled!")
             StopPixelGainBoost()
         end
    end,
})






local function sendUpgradeRequest5()
    local args = {
        [1] = "4_2",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local LuckGainBoostTimer = nil
local checking = false

local function StartLuckGainBoost()
    LuckGainBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checking then
            checking = true
            sendUpgradeRequest5()
            wait(1.5)
            checking = false
       end
   end)
end

local function StopLuckGainBoost()
    if LuckGainBoostTimer then
        LuckGainBoostTimer:Disconnect()
        LuckGainBoostTimer = nil
    end
end

local Toggle2 = MainTab:CreateToggle({
    Name = "Prestige Luck Boost",
    CurrentValue = false,
    Flag = "Toggle5",
    Callback = function(Value)
         if Value then
             print("Prestige Luck Boost enabled!")
             StartLuckGainBoost()
         else
             print("Prestige Luck Boost disabled!")
             StopLuckGainBoost()
         end
    end,
})









local function sendUpgradeRequest6()
    local args = {
        [1] = "4_3",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local PrestigeBoostTimer = nil
local checking = false

local function StartPrestigeBoost()
    PrestigeBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checking then
            checking = true    
            sendUpgradeRequest6()
            wait(1.5)
            checking = fasle
       end
    end)
end

local function StopPrestigeBoost()
    if PrestigeBoostTimer then
        PrestigeBoostTimer:Disconnect()
        PrestigeBoostTimer = nil
    end
end

local Toggle6 = MainTab:CreateToggle({
    Name = "Prestige Boost",
    CurrentValue = false,
    Flag = "Toggle6",
    Callback = function(Value)
         if Value then
             print("Prestige Boost enabled!")
             StartPrestigeBoost()
         else
             print("Prestige Boost disabled!")
             StopPrestigeBoost()
         end
    end,
})







local function sendUpgradeRequest20()
    local args = {
        [1] = "4_4",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local ClickBoostTimer = nil
local checking = false

local function StartClickBoost()
    ClickBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checking then
            checking = true     
            sendUpgradeRequest20()
            wait(1)
            checking = false
       end
    end)
end

local function StopClickBoost()
    if ClickBoostTimer then
        ClickBoostTimer:Disconnect()
        ClickBoostTimer = nil
    end
end

local Toggle20 = MainTab:CreateToggle({
    Name = "Click Boost!",
    CurrentValue = false,
    Flag = "Toggle20",
    Callback = function(Value)
         if Value then
             print("Click Boost enabled!")
             StartClickBoost()
         else
             print("Click Boost disabled!")
             StopClickBoost()
         end
    end,
})





local MainTab = Window:CreateTab("‚öôÔ∏è Factory!", nil)

local MainSection = MainTab:CreateSection("Factory Upgrades!")


local function sendUpgradeRequest11_1()
    local args = {
        [1] = "11_1",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local Upgrade11_1Timer = nil
local checking = false

local function StartUpgrade11_1()
   Upgrade11_1Timer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checking then
           checking = true   
           sendUpgradeRequest11_1()
           wait(1.5)
           checking = false
        end
    end)
end


local function StopUpgrade11_1()
    if Upgrade11_1Timer then
        Upgrade11_1Timer:Disconnect()
        Upgrade11_1Timer = nil
    end
end

local Toggle11_1 = MainTab:CreateToggle({
    Name = "Scrap Boost!",
    CurrentValue = false,
    Flag = "Toggle11_1",
    Callback = function(Value)
         if Value then
             print("Upgrade 11_1 Boost enabled!")
             StartUpgrade11_1()
         else
             print("Upgrade 11_1 Boost disabled!")
             StopUpgrade11_1()
         end
    end,
})


local MainSection = MainTab:CreateSection("Shiny Scrap Upgrades!")






-- Scrap Boost
local function sendUpgradeRequestScrapBoost()
    local args = {
        [1] = "12_2",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local ScrapBoostTimer = nil
local checking = false

local function StartScrapBoost()
    ScrapBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
        if not checking then
              checking = true           
              sendUpgradeRequestScrapBoost()
              wait(1.5)
              checking = false
         end    
    end)
end

local function StopScrapBoost()
    if ScrapBoostTimer then
        ScrapBoostTimer:Disconnect()
        ScrapBoostTimer = nil
    end
end

local ToggleScrapBoost = MainTab:CreateToggle({
    Name = "Scrap Boost",
    CurrentValue = false,
    Flag = "ToggleScrapBoost",
    Callback = function(Value)
        if Value then
            print("Scrap Boost enabled!")
            StartScrapBoost()
        else
            print("Scrap Boost disabled!")
            StopScrapBoost()
        end
    end,
})





-- Unlock Diamond Scrap
local function sendUpgradeRequestUnlockDiamondScrap()
    local args = {
        [1] = "12_3",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local UnlockDiamondScrapTimer = nil
local checking = false

local function StartUnlockDiamondScrap()
    UnlockDiamondScrapTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checking then
            checking = true
            sendUpgradeRequestUnlockDiamondScrap()
            wait(1.5)
            checking = false
        end
    end)
end

local function StopUnlockDiamondScrap()
    if UnlockDiamondScrapTimer then
        UnlockDiamondScrapTimer:Disconnect()
        UnlockDiamondScrapTimer = nil
    end
end

local ToggleUnlockDiamondScrap = MainTab:CreateToggle({
    Name = "Unlock Diamond Scrap",
    CurrentValue = false,
    Flag = "ToggleUnlockDiamondScrap",
    Callback = function(Value)
        if Value then
            print("Unlock Diamond Scrap enabled!")
            StartUnlockDiamondScrap()
        else
            print("Unlock Diamond Scrap disabled!")
            StopUnlockDiamondScrap()
        end
    end,
})


local MainSectionDiamond = MainTab:CreateSection("Diamond Scrap")



local function sendUpgradeRequestGoldenScrapGain()
    local args = {
        [1] = "13_2",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local GoldenScrapGainTimer = nil
local checking = false

local function StartGoldenScrapGain()
    GoldenScrapGainTimer = game:GetService("RunService").Heartbeat:Connect(function()
      if not checking then
            checking = true                    
            sendUpgradeRequestGoldenScrapGain()
            wait(1.5)
            checking = false
       end    
   end)
end

local function StopGoldenScrapGain()
    if GoldenScrapGainTimer then
        GoldenScrapGainTimer:Disconnect()
        GoldenScrapGainTimer = nil
    end
end

local ToggleGoldenScrapGain = MainTab:CreateToggle({
    Name = "Golden Scrap Gain",
    CurrentValue = false,
    Flag = "ToggleGoldenScrapGain",
    Callback = function(Value)
        if Value then
            print("Golden Scrap Gain enabled!")
            StartGoldenScrapGain()
        else
            print("Golden Scrap Gain disabled!")
            StopGoldenScrapGain()
        end
    end,
})





-- Factory Spawn Speed
local function sendUpgradeRequestFactorySpawnSpeed()
    local args = {
        [1] = "13_3",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local FactorySpawnSpeedTimer = nil
local checking = false

local function StartFactorySpawnSpeed()
    FactorySpawnSpeedTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checking then
            checking = true 
            sendUpgradeRequestFactorySpawnSpeed()
            wait(1.5)
            checking = false
       end
   end)
end

local function StopFactorySpawnSpeed()
    if FactorySpawnSpeedTimer then
        FactorySpawnSpeedTimer:Disconnect()
        FactorySpawnSpeedTimer = nil
    end
end

local ToggleFactorySpawnSpeed = MainTab:CreateToggle({
    Name = "Factory Spawn Speed",
    CurrentValue = false,
    Flag = "ToggleFactorySpawnSpeed",
    Callback = function(Value)
        if Value then
            print("Factory Spawn Speed enabled!")
            StartFactorySpawnSpeed()
        else
            print("Factory Spawn Speed disabled!")
            StopFactorySpawnSpeed()
        end
    end,
})




local MainTab = Window:CreateTab("StarDust!", nil)

local MainSection = MainTab:CreateSection("StarDust Upgrades!")


local function sendUpgradeRequestStardustGain()
    local args = {
        [1] = "15_1",  -- AsigurƒÉ-te cƒÉ acest ID este corect pentru upgrade-ul Stardust Gain
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local StardustGainTimer = nil
local checkingStardustGain = false

local function StartStardustGain()
    StardustGainTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checkingStardustGain then
            checkingStardustGain = true 
            sendUpgradeRequestStardustGain()
            wait(1.5)
            checkingStardustGain = false
       end
   end)
end

local function StopStardustGain()
    if StardustGainTimer then
        StardustGainTimer:Disconnect()
        StardustGainTimer = nil
    end
end

local ToggleStardustGain = MainTab:CreateToggle({
    Name = "Auto Stardust Gain",
    CurrentValue = false,
    Flag = "ToggleStardustGain",
    Callback = function(Value)
        if Value then
            print("Auto Stardust Gain enabled!")
            StartStardustGain()
        else
            print("Auto Stardust Gain disabled!")
            StopStardustGain()
        end
    end,
})



local MainSection = MainTab:CreateSection("StarDust Upgrades!")



local function sendUpgradeRequestStardustLuckBoost()
    local args = {
        [1] = "15_2",  -- AsigurƒÉ-te cƒÉ acest ID este corect pentru upgrade-ul Stardust Luck Boost
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local StardustLuckBoostTimer = nil
local checkingStardustLuckBoost = false

local function StartStardustLuckBoost()
    StardustLuckBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checkingStardustLuckBoost then
            checkingStardustLuckBoost = true 
            sendUpgradeRequestStardustLuckBoost()
            wait(1.5)
            checkingStardustLuckBoost = false
       end
   end)
end

local function StopStardustLuckBoost()
    if StardustLuckBoostTimer then
        StardustLuckBoostTimer:Disconnect()
        StardustLuckBoostTimer = nil
    end
end

local ToggleStardustLuckBoost = MainTab:CreateToggle({
    Name = "Auto Stardust Luck Boost",
    CurrentValue = false,
    Flag = "ToggleStardustLuckBoost",
    Callback = function(Value)
        if Value then
            print("Auto Stardust Luck Boost enabled!")
            StartStardustLuckBoost()
        else
            print("Auto Stardust Luck Boost disabled!")
            StopStardustLuckBoost()
        end
    end,
})



local MainSection = MainTab:CreateSection("StarDust Upgrades!")



local function sendUpgradeRequestStarsGainBoost()
    local args = {
        [1] = "15_3",  -- AsigurƒÉ-te cƒÉ acest ID este corect pentru upgrade-ul Stars Gain Boost
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local StarsGainBoostTimer = nil
local checkingStarsGainBoost = false

local function StartStarsGainBoost()
    StarsGainBoostTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checkingStarsGainBoost then
            checkingStarsGainBoost = true 
            sendUpgradeRequestStarsGainBoost()
            wait(1.5)
            checkingStarsGainBoost = false
       end
   end)
end

local function StopStarsGainBoost()
    if StarsGainBoostTimer then
        StarsGainBoostTimer:Disconnect()
        StarsGainBoostTimer = nil
    end
end

local ToggleStarsGainBoost = MainTab:CreateToggle({
    Name = "Auto Stars Gain Boost",
    CurrentValue = false,
    Flag = "ToggleStarsGainBoost",
    Callback = function(Value)
        if Value then
            print("Auto Stars Gain Boost enabled!")
            StartStarsGainBoost()
        else
            print("Auto Stars Gain Boost disabled!")
            StopStarsGainBoost()
        end
    end,
})




local MainSection = MainTab:CreateSection("StarDust Upgrades!")


local function sendUpgradeRequestStardustScrapGain()
    local args = {
        [1] = "15_4",  -- AsigurƒÉ-te cƒÉ acest ID este corect pentru upgrade-ul Stardust Scrap Gain
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local StardustScrapGainTimer = nil
local checkingStardustScrapGain = false

local function StartStardustScrapGain()
    StardustScrapGainTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checkingStardustScrapGain then
            checkingStardustScrapGain = true 
            sendUpgradeRequestStardustScrapGain()
            wait(1.5)
            checkingStardustScrapGain = false
       end
   end)
end

local function StopStardustScrapGain()
    if StardustScrapGainTimer then
        StardustScrapGainTimer:Disconnect()
        StardustScrapGainTimer = nil
    end
end

local ToggleStardustScrapGain = MainTab:CreateToggle({
    Name = "Auto Stardust Scrap Gain",
    CurrentValue = false,
    Flag = "ToggleStardustScrapGain",
    Callback = function(Value)
        if Value then
            print("Auto Stardust Scrap Gain enabled!")
            StartStardustScrapGain()
        else
            print("Auto Stardust Scrap Gain disabled!")
            StopStardustScrapGain()
        end
    end,
})






local MainSection = MainTab:CreateSection("StarDust Upgrades!")

local function sendUpgradeRequestStarDustSpawnRate()
    local args = {
        [1] = "15_5",  -- AsigurƒÉ-te cƒÉ acest ID este corect pentru upgrade-ul StarDust Spawn Rate
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local StarDustSpawnRateTimer = nil
local checkingStarDustSpawnRate = false

local function StartStarDustSpawnRate()
    StarDustSpawnRateTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checkingStarDustSpawnRate then
            checkingStarDustSpawnRate = true 
            sendUpgradeRequestStarDustSpawnRate()
            wait(1.5)
            checkingStarDustSpawnRate = false
       end
   end)
end

local function StopStarDustSpawnRate()
    if StarDustSpawnRateTimer then
        StarDustSpawnRateTimer:Disconnect()
        StarDustSpawnRateTimer = nil
    end
end

local ToggleStarDustSpawnRate = MainTab:CreateToggle({
    Name = "Auto StarDust Spawn Rate",
    CurrentValue = false,
    Flag = "ToggleStarDustSpawnRate",
    Callback = function(Value)
        if Value then
            print("Auto StarDust Spawn Rate enabled!")
            StartStarDustSpawnRate()
        else
            print("Auto StarDust Spawn Rate disabled!")
            StopStarDustSpawnRate()
        end
    end,
})




local MainSection = MainTab:CreateSection("StarDust Upgrades!")

local function sendUpgradeRequestStarDustCapacity()
    local args = {
        [1] = "15_6",  -- AsigurƒÉ-te cƒÉ acest ID este corect pentru upgrade-ul StarDust Capacity
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local StarDustCapacityTimer = nil
local checkingStarDustCapacity = false

local function StartStarDustCapacity()
    StarDustCapacityTimer = game:GetService("RunService").Heartbeat:Connect(function()
       if not checkingStarDustCapacity then
            checkingStarDustCapacity = true 
            sendUpgradeRequestStarDustCapacity()
            wait(1.5)
            checkingStarDustCapacity = false
       end
   end)
end

local function StopStarDustCapacity()
    if StarDustCapacityTimer then
        StarDustCapacityTimer:Disconnect()
        StarDustCapacityTimer = nil
    end
end

local ToggleStarDustCapacity = MainTab:CreateToggle({
    Name = "Auto StarDust Capacity",
    CurrentValue = false,
    Flag = "ToggleStarDustCapacity",
    Callback = function(Value)
        if Value then
            print("Auto StarDust Capacity enabled!")
            StartStarDustCapacity()
        else
            print("Auto StarDust Capacity disabled!")
            StopStarDustCapacity()
        end
    end,
})







local MainTab = Window:CreateTab("‚öôÔ∏è Auto Pixels!", nil)
local MainSection = MainTab:CreateSection("Auto Collect!")

local pixelsObject = workspace:WaitForChild("Pixels")  -- Ob»õine obiectul "Pixels" din workspace
local player = game.Players.LocalPlayer  -- Referin»õƒÉ la jucƒÉtorul local
local teleportInterval = 0.3  -- Intervalul implicit pentru teleportare, √Æn secunde

-- Func»õia pentru a teleporteza fiecare copil la jucƒÉtor
local function teleportChildrenToPlayer()
    for _, child in pairs(pixelsObject:GetChildren()) do
        if child:IsA("BasePart") then
            child.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 1, 0)  -- TeleporteazƒÉ copilul la jucƒÉtor
        end
    end
end

-- Func»õie pentru a √Æncepe teleportarea automatƒÉ la intervalul specificat
local function StartAutoTeleport()
    spawn(function()
        while true do
            teleportChildrenToPlayer()
            wait(teleportInterval)
        end
    end)
end

-- CreazƒÉ un slider pentru a ajusta intervalul de teleportare
local TeleportIntervalSlider = MainTab:CreateSlider({
    Name = "Teleport Interval",
    Range = {0.1, 30},  -- Intervalul minim »ôi maxim √Æn secunde
    Increment = 0.1,
    Suffix = "Seconds",
    CurrentValue = teleportInterval,
    Flag = "sliderTeleportInterval", -- Identificatorul pentru salvarea √Æn configura»õie
    Callback = function(Value)
        teleportInterval = Value
    end,
})

-- CreazƒÉ un buton pentru a porni »ôi opri teleportarea automatƒÉ
local ToggleAutoTeleport = MainTab:CreateToggle({
    Name = "Auto Teleport Pixels ‚öôÔ∏è!",
    CurrentValue = false,
    Flag = "ToggleAutoTeleport",
    Callback = function(Value)
        if Value then
            print("Auto Teleport enabled!")
            StartAutoTeleport()
        else
            print("Auto Teleport disabled!")
            -- Opri»õi teleportarea automatƒÉ (dacƒÉ ave»õi o func»õie StopAutoTeleport, o pute»õi adƒÉuga aici)
        end
    end,
})














local MainTab = Window:CreateTab("üè† Teleport!", nil)
-- CreazƒÉ o sec»õiune pentru teleport
local MainSection = MainTab:CreateSection("üè† Teleport!")

-- CreazƒÉ butonul pentru teleportare
local Button1 = MainTab:CreateButton({
    Name = "üè† Spawn!",
    Callback = function()
        -- Teleportare la PixelSpawnBase
        local spawnLocation = workspace:WaitForChild("PixelSpawnBase")
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(spawnLocation.CFrame)
        print("Teleported to Spawn Location!")
    end,
})


local Button1 = MainTab:CreateButton({
    Name = "üî≤ Tier Roll!",
    Callback = function()
        -- Teleportare la workspace.Roll.Button.Touch
        local rollButtonTouch = workspace:WaitForChild("Roll"):WaitForChild("Button"):WaitForChild("Touch")
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(rollButtonTouch.CFrame)
        print("Teleported to Roll Button Touch!")
    end,
})



local Button1 = MainTab:CreateButton({
    Name = "üñ± Clicker Mastery!",
    Callback = function()
        -- Teleportare la workspace.Roll.Button.Touch
        local rollButtonTouch = workspace:WaitForChild("ClickMastery"):WaitForChild("Board")
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(rollButtonTouch.CFrame)
        print("Teleported to Clicker Mastery!")
    end,
})



local MainSection = MainTab:CreateSection("Auto Runes + Research!")

local teleportCoords1 = CFrame.new(-97.533020019, 7.0728847980, -10.7717494964)
local teleportCoords2 = CFrame.new(88.50657, 8.534290, 84.559219)
local teleportInterval = 5  -- Intervalul implicit pentru teleportare, √Æn secunde
local autoTeleportEnabled = false  -- Flag pentru teleportarea automatƒÉ

-- Func»õia pentru a teleporta jucƒÉtorul la coordonatele specificate
local function teleportToCoords(coords)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character:SetPrimaryPartCFrame(coords)
    end
end

-- Func»õia pentru a √Æncepe teleportarea automatƒÉ √Æntre cele douƒÉ coordonate
local function StartAutoTeleport()
    autoTeleportEnabled = true
    spawn(function()
        while autoTeleportEnabled do
            teleportToCoords(teleportCoords1)
            wait(teleportInterval)
            if not autoTeleportEnabled then break end
            teleportToCoords(teleportCoords2)
            wait(1)  -- A»ôteaptƒÉ 1 secundƒÉ √Ænainte de a se teleporta √Ænapoi
        end
    end)
end

-- Func»õia pentru a opri teleportarea automatƒÉ
local function StopAutoTeleport()
    autoTeleportEnabled = false
end

-- CreazƒÉ un slider pentru a ajusta intervalul de teleportare
local TeleportIntervalSlider = MainTab:CreateSlider({
    Name = "Teleport Interval",
    Range = {5, 120},  -- Intervalul minim »ôi maxim √Æn secunde
    Increment = 1,
    Suffix = "Seconds",
    CurrentValue = teleportInterval,
    Flag = "sliderTeleportInterval", -- Identificatorul pentru salvarea √Æn configura»õie
    Callback = function(Value)
        teleportInterval = Value
    end,
})

-- CreazƒÉ un buton toggable pentru a porni »ôi opri teleportarea automatƒÉ
local ToggleAutoTeleport = MainTab:CreateToggle({
    Name = "Auto Teleport",
    CurrentValue = false,
    Flag = "ToggleAutoTeleport",
    Callback = function(Value)
        if Value then
            print("Auto Teleport enabled!")
            StartAutoTeleport()
        else
            print("Auto Teleport disabled!")
            StopAutoTeleport()
        end
    end,
})




local MainSection = MainTab:CreateSection("Auto Factory + Research!")

local teleportCoords1 = CFrame.new(-65.184249, 7.53429079, -101.7111968)
local teleportCoords2 = CFrame.new(88.50657, 8.534290, 84.559219)
local teleportInterval = 5  -- Intervalul implicit pentru teleportare, √Æn secunde
local autoTeleport1Enabled = false  -- Flag pentru teleportarea automatƒÉ

-- Func»õia pentru a teleporta jucƒÉtorul la coordonatele specificate
local function teleportToCoords(coords)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character:SetPrimaryPartCFrame(coords)
    end
end

-- Func»õia pentru a √Æncepe teleportarea automatƒÉ √Æntre cele douƒÉ coordonate
local function StartAutoTeleport1()
    autoTeleport1Enabled = true
    spawn(function()
        while autoTeleport1Enabled do
            teleportToCoords(teleportCoords1)
            wait(teleportInterval)
            if not autoTeleport1Enabled then break end
            teleportToCoords(teleportCoords2)
            wait(1)  -- A»ôteaptƒÉ 1 secundƒÉ √Ænainte de a se teleporta √Ænapoi
        end
    end)
end

-- Func»õia pentru a opri teleportarea automatƒÉ
local function StopAutoTeleport1()
    autoTeleport1Enabled = false
end

-- CreazƒÉ un slider pentru a ajusta intervalul de teleportare
local TeleportIntervalSlider = MainTab:CreateSlider({
    Name = "Teleport Interval",
    Range = {5, 120},  -- Intervalul minim »ôi maxim √Æn secunde
    Increment = 150,
    Suffix = "Seconds",
    CurrentValue = teleportInterval,
    Flag = "sliderTeleportInterval", -- Identificatorul pentru salvarea √Æn configura»õie
    Callback = function(Value)
        teleportInterval = Value
    end,
})

-- CreazƒÉ un buton toggable pentru a porni »ôi opri teleportarea automatƒÉ
local ToggleAutoTeleport1 = MainTab:CreateToggle({
    Name = "Auto Teleport",
    CurrentValue = false,
    Flag = "ToggleAutoTeleport1",
    Callback = function(Value)
        if Value then
            print("Auto Teleport enabled!")
            StartAutoTeleport1()
        else
            print("Auto Teleport disabled!")
            StopAutoTeleport1()
        end
    end,
})




-- Sec»õiunea 1: Runes + Research at selected Tier!
local MainSection1 = MainTab:CreateSection("Runes + Research at selected Tier!")

-- Coordonatele pentru teleportare ini»õialƒÉ
local initialTeleportCoordinates1 = Vector3.new(-65.184249, 7.53429079, -101.7111968)

-- Coordonatele pentru teleportare atunci c√¢nd tier-ul este atins
local teleportCoordinates1 = Vector3.new(88.50657, 8.534290, 84.559219)

-- VariabilƒÉ pentru a stoca tier-ul dorit
local desiredTier1 = 185

-- Func»õia pentru a ob»õine tier-ul curent
local function getCurrentTier1()
    local tierText = game.Workspace.Roll.Board.SurfaceGui.Tier.Text
    local tierNumber = tonumber(tierText:match("%d+")) -- Extrage doar numƒÉrul din text
    if tierNumber then
        return tierNumber
    else
        return 0 -- ReturneazƒÉ 0 dacƒÉ textul nu poate fi convertit √Æntr-un numƒÉr
    end
end

-- Func»õia pentru a verifica tier-ul »ôi a te teleporta dacƒÉ este necesar
local function checkTierAndTeleport1()
    local currentTier = getCurrentTier1()
    if currentTier >= desiredTier1 then
        local player = game.Players.LocalPlayer
        local character = player.Character
        if not character or not character.PrimaryPart then return end
        
        -- TeleporteazƒÉ la coordonatele specificate
        character:SetPrimaryPartCFrame(CFrame.new(teleportCoordinates1))
        
        -- A»ôteaptƒÉ 1.5 secunde pentru a permite cƒÉderea
        wait(1.5)
        
        -- TeleporteazƒÉ √Ænapoi
        character:SetPrimaryPartCFrame(CFrame.new(initialTeleportCoordinates1))
    end
end

local tierCheckTimer1 = nil

-- Func»õia pentru a √Æncepe verificarea tier-ului
local function StartTierCheck1()
    tierCheckTimer1 = game:GetService("RunService").Heartbeat:Connect(function()
        checkTierAndTeleport1()
    end)
end

-- Func»õia pentru a opri verificarea tier-ului
local function StopTierCheck1()
    if tierCheckTimer1 then
        tierCheckTimer1:Disconnect()
        tierCheckTimer1 = nil
    end
end

-- CreazƒÉ un toggle pentru verificarea tier-ului
local ToggleTierCheck1 = MainTab:CreateToggle({
    Name = "Check Tier and Teleport (Runes + Research)",
    CurrentValue = false,
    Flag = "ToggleTierCheck1",
    Callback = function(Value)
        if Value then
            print("Tier check enabled!")
            StartTierCheck1()
            -- TeleporteazƒÉ la coordonatele ini»õiale
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character.PrimaryPart then
                character:SetPrimaryPartCFrame(CFrame.new(initialTeleportCoordinates1))
            end
        else
            print("Tier check disabled!")
            StopTierCheck1()
        end
    end,
})

-- CreazƒÉ un slider pentru selectarea tier-ului dorit
local TierSlider1 = MainTab:CreateSlider({
    Name = "Desired Tier (Runes + Research)",
    Range = {150, 230},
    Increment = 1,
    Suffix = "Tier",
    CurrentValue = desiredTier1,
    Flag = "sliderDesiredTier1", -- Identificatorul pentru salvarea √Æn configura»õie
    Callback = function(Value)
        desiredTier1 = Value
        print("Desired tier set to:", desiredTier1)
    end,
})

-- Sec»õiunea 2: Factory + Research at selected Tier!
local MainSection2 = MainTab:CreateSection("Factory + Research at selected Tier!")

-- Coordonatele pentru teleportare ini»õialƒÉ
local initialTeleportCoordinates2 = Vector3.new(-97.533020019, 7.0728847980, -10.7717494964)

-- Coordonatele pentru teleportare atunci c√¢nd tier-ul este atins
local teleportCoordinates2 = Vector3.new(88.50657, 8.534290, 84.559219)

-- VariabilƒÉ pentru a stoca tier-ul dorit
local desiredTier2 = 185

-- Func»õia pentru a ob»õine tier-ul curent
local function getCurrentTier2()
    local tierText = game.Workspace.Roll.Board.SurfaceGui.Tier.Text
    local tierNumber = tonumber(tierText:match("%d+")) -- Extrage doar numƒÉrul din text
    if tierNumber then
        return tierNumber
    else
        return 0 -- ReturneazƒÉ 0 dacƒÉ textul nu poate fi convertit √Æntr-un numƒÉr
    end
end

-- Func»õia pentru a verifica tier-ul »ôi a te teleporta dacƒÉ este necesar
local function checkTierAndTeleport2()
    local currentTier = getCurrentTier2()
    if currentTier >= desiredTier2 then
        local player = game.Players.LocalPlayer
        local character = player.Character
        if not character or not character.PrimaryPart then return end
        
        -- TeleporteazƒÉ la coordonatele specificate
        character:SetPrimaryPartCFrame(CFrame.new(teleportCoordinates2))
        
        -- A»ôteaptƒÉ 1.5 secunde pentru a permite cƒÉderea
        wait(1.5)
        
        -- TeleporteazƒÉ √Ænapoi
        character:SetPrimaryPartCFrame(CFrame.new(initialTeleportCoordinates2))
    end
end

local tierCheckTimer2 = nil

-- Func»õia pentru a √Æncepe verificarea tier-ului
local function StartTierCheck2()
    tierCheckTimer2 = game:GetService("RunService").Heartbeat:Connect(function()
        checkTierAndTeleport2()
    end)
end

-- Func»õia pentru a opri verificarea tier-ului
local function StopTierCheck2()
    if tierCheckTimer2 then
        tierCheckTimer2:Disconnect()
        tierCheckTimer2 = nil
    end
end

-- CreazƒÉ un toggle pentru verificarea tier-ului
local ToggleTierCheck2 = MainTab:CreateToggle({
    Name = "Check Tier and Teleport (Factory + Research)",
    CurrentValue = false,
    Flag = "ToggleTierCheck2",
    Callback = function(Value)
        if Value then
            print("Tier check enabled!")
            StartTierCheck2()
            -- TeleporteazƒÉ la coordonatele ini»õiale
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character.PrimaryPart then
                character:SetPrimaryPartCFrame(CFrame.new(initialTeleportCoordinates2))
            end
        else
            print("Tier check disabled!")
            StopTierCheck2()
        end
    end,
})

-- CreazƒÉ un slider pentru selectarea tier-ului dorit
local TierSlider2 = MainTab:CreateSlider({
    Name = "Desired Tier (Factory + Research)",
    Range = {150, 230},
    Increment = 1,
    Suffix = "Tier",
    CurrentValue = desiredTier2,
    Flag = "sliderDesiredTier2", -- Identificatorul pentru salvarea √Æn configura»õie
    Callback = function(Value)
        desiredTier2 = Value
        print("Desired tier set to:", desiredTier2)
    end,
})








local MainTab = Window:CreateTab("üñ± Click Mastery!", nil)
local MainSection = MainTab:CreateSection("üñ± Auto Complete Click Mastery!")

local ClickTimer = nil

local function SpamClickMastery()
    ClickTimer = game:GetService("RunService").Heartbeat:Connect(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("Click"):FireServer()
    end)
end

local function StopClickMastery()
    if ClickTimer then
        ClickTimer:Disconnect()
        ClickTimer = nil
    end
end

local SpamButton = MainTab:CreateButton({
    Name = "Spam Click Mastery",
    Callback = function()
        if not ClickTimer then
            SpamClickMastery()
            print("Spam Click Mastery enabled!")
        else
            StopClickMastery()
            print("Spam Click Mastery disabled!")
        end
    end,
})






local MainSection = MainTab:CreateSection("üñ± Click Upgrades!")


local function sendUpgradeRequest10()
    local args = {
        [1] = "5_1",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local PixelBoostClickTimer = nil
local checking = false

local function StartPixelBoostClick()
    PixelBoostClickTimer = game:GetService("RunService").Heartbeat:Connect(function()
        if not checking then
            checking = true
            sendUpgradeRequest10()
            wait(1.5)
            checking = false
        end
    end)
end

local function StopPixelBoostClick()
    if PixelBoostClickTimer then
        PixelBoostClickTimer:Disconnect()
        PixelBoostClickTimer = nil
    end
end




local function sendUpgradeRequest11()
    local args = {
        [1] = "5_2",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local LuckBoostClickerTimer = nil
local checking = false

local function StartLuckBoostClicker()
    LuckBoostClickerTimer = game:GetService("RunService").Heartbeat:Connect(function()
        if not checking then
            checking = true
            sendUpgradeRequest11()
            wait(1.5)
            checking = false
        end
    end)
end

local function StopLuckBoostClicker()
    if LuckBoostClickerTimer then
        LuckBoostClickerTimer:Disconnect()
        LuckBoostClickerTimer = nil
    end
end





local function sendUpgradeRequest12()
    local args = {
        [1] = "5_3",
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local PrestigeClickerTimer = nil
local checking = false

local function StartPrestigeClicker()
    PrestigeClickerTimer = game:GetService("RunService").Heartbeat:Connect(function()
        if not checking then
            checking = true  
            sendUpgradeRequest12()            
            wait(1.5)
            checking = false
        end
    end)
end

local function StopPrestigeClicker()
    if PrestigeClickerTimer then
        PrestigeClickerTimer:Disconnect()
        PrestigeClickerTimer = nil
    end
end

local Toggle1 = MainTab:CreateToggle({
    Name = "Pixel Boost Clicker",
    CurrentValue = false,
    Flag = "Toggle10",
    Callback = function(Value)
         if Value then
             print("Pixel Boost Click enabled!")
             StartPixelBoostClick()
         else
             print("Pixel Boost Click disabled!")
             StopPixelBoostClick()
         end
    end,
})

local Toggle2 = MainTab:CreateToggle({
    Name = "Luck Gain Clicker",
    CurrentValue = false,
    Flag = "Toggle11",
    Callback = function(Value)
         if Value then
             print("Luck Boost Clicker enabled!")
             StartLuckBoostClicker()
         else
             print("Luck Boost Clicker disabled!")
             StopLuckBoostClicker()
         end
    end,
})

local Toggle3 = MainTab:CreateToggle({
    Name = "Prestige Clicker",
    CurrentValue = false,
    Flag = "Toggle12",
    Callback = function(Value)
         if Value then
             print("Prestige Clicker enabled!")
             StartPrestigeClicker()
         else
             print("Prestige Clicker disabled!")
             StopPrestigeClicker()
         end
    end,
})




local MainTab = Window:CreateTab("üíÄ Research!", nil)
-- CreazƒÉ o sec»õiune pentru teleport
local MainSection = MainTab:CreateSection("üíÄ Research!")


local function sendSingleUpgradeRequest(upgradeIndex)
    local args = {
        [1] = "7_" .. upgradeIndex,
        [2] = true
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("BuyUpgrade"):FireServer(unpack(args))
end

local function sendAllUpgradesRequest()
    local attempts = 10  -- NumƒÉrul de √ÆncercƒÉri de cumpƒÉrare
    for i = 1, 29 do
        for j = 1, attempts do
            sendSingleUpgradeRequest(i)
        end
    end
end

local SingleUpgradeButton = MainTab:CreateButton({
    Name = "Buy 7_11 Upgrade",
    Callback = function()
        sendSingleUpgradeRequest(11)
    end,
})

local AllUpgradesButton = MainTab:CreateButton({
    Name = "Buy All 7_1 to 7_26 Upgrades (x10)",
    Callback = function()
        sendAllUpgradesRequest()
    end,
})








local MainTab = Window:CreateTab("üî¥ Colors!", nil)
-- CreazƒÉ o sec»õiune pentru teleport
local MainSection = MainTab:CreateSection("üî¥ Colors!")





local function sendColorRequest(color)
    local args = {
        [1] = color,
        [2] = 10
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Assets"):WaitForChild("RemoteEvents"):WaitForChild("SpendColor"):FireServer(unpack(args))
end

local function executeColorSequence()
    local colors = {"Green", "Blue", "Purple"}
    local attempts = 5  -- NumƒÉrul de √ÆncercƒÉri pentru fiecare culoare
    
    for i = 1, attempts do
        for _, color in ipairs(colors) do
            sendColorRequest(color)
            wait(0.3)  -- A»ôteaptƒÉ 1 secundƒÉ √Æntre fiecare cerere de culoare
        end
    end
end

local ColorSequenceButton = MainTab:CreateButton({
    Name = "Buy 10% each!",
    Callback = function()
        executeColorSequence()
    end,
})



local MainTab = Window:CreateTab("Misc!", nil)




local Button = MainTab:CreateButton({
    Name = "Infinite Jump Toggle",
    Callback = function()
        --Toggles the infinite jump between on or off on every script run
 _G.infinjump = not _G.infinjump
 
 if _G.infinJumpStarted == nil then
     --Ensures this only runs once to save resources
     _G.infinJumpStarted = true
     
     --Notifies readiness
     game.StarterGui:SetCore("SendNotification", {Title="Youtube Hub"; Text="Infinite Jump Activated!"; Duration=5;})
 
     --The actual infinite jump
     local plr = game:GetService('Players').LocalPlayer
     local m = plr:GetMouse()
     m.KeyDown:connect(function(k)
         if _G.infinjump then
             if k:byte() == 32 then
             humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
             humanoid:ChangeState('Jumping')
             wait()
             humanoid:ChangeState('Seated')
             end
         end
     end)
 end
    end,
 })
 
 local Slider = MainTab:CreateSlider({
    Name = "WalkSpeed Slider",
    Range = {1, 350},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "sliderws", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
         game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
    end,
 })
 
 local Slider = MainTab:CreateSlider({
    Name = "JumpPower Slider",
    Range = {1, 350},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "sliderjp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
         game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
    end,
 })


 local MainSection = MainTab:CreateSection("Anti AFK")

 local AllUpgradesButton = MainTab:CreateButton({
     Name = "Anti AFK Script!",
     Callback = function()
         loadstring(game:HttpGet("https://raw.githubusercontent.com/KazeOnTop/Rice-Anti-Afk/main/Wind", true))()
     end,
 })
